// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3824.TestBench2017.subsystems;

import org.usfirst.frc3824.TestBench2017.RobotMap;
import org.usfirst.frc3824.TestBench2017.commands.*;

import com.ctre.CANTalon;

import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class NewShooter extends Subsystem
{

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon shooter = RobotMap.newShooterShooter;
    private final CANTalon feeder = RobotMap.newShooterFeeder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	public NewShooter()
	{
		shooter.setFeedbackDevice(CANTalon.FeedbackDevice.CtreMagEncoder_Relative);
		shooter.reverseSensor(false);

		/* set the peak and nominal outputs, 12V means full */
		shooter.configNominalOutputVoltage(+0.0f, -0.0f);
		shooter.configPeakOutputVoltage(+12.0f, -12.0f);

		/* set closed loop gains in slot0 */
		SmartDashboard.putNumber("Shooter P", 50.0);
		SmartDashboard.putNumber("Shooter I", 0.4);
		SmartDashboard.putNumber("Shooter D", 0.0);
		SmartDashboard.putNumber("Shooter F", 0.0);
		SmartDashboard.putNumber("Shooter RPM Setpoint", 4500);

		// Set the profile for the PID parameters
		shooter.setProfile(0);
		shooter.configEncoderCodesPerRev(4096);
		shooter.reverseSensor(true);

		// Use the PID values from the smartdashboard, which were just set
		shooter.setP(SmartDashboard.getNumber("Shooter P", 50.0)/1000);
		shooter.setI(SmartDashboard.getNumber("Shooter I", 0.4)/1000);
		shooter.setD(SmartDashboard.getNumber("Shooter D", 0.0)/1000);
		shooter.setF(SmartDashboard.getNumber("Shooter F", 0.0)/1000);
	}

	public void initDefaultCommand()
	{
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	}

	public void setShooterRPM(double RPM)
	{
		// Set the Talon in PID speed mode
		shooter.changeControlMode(CANTalon.TalonControlMode.Speed);

		// Set the desired speed
		shooter.set(RPM);
	}

	public void setShooterSpeed(double speed)
	{
		// Set the Talon in voltage mode
		shooter.changeControlMode(CANTalon.TalonControlMode.PercentVbus);
		
		// Set the desired speed
		shooter.set(speed);
	}

	public void setFeederRPM(double RPM)
	{

	}
	
	public void enableShooterPID()
	{
		shooter.enable();
	}
	
	public void disableShooterPID()
	{
		shooter.disable();
	}

	public void setShooterPID_Parameters(double F, double P, double I, double D)
	{
		// Read the F, P, I and D parameters from the smartdashboard
		shooter.setF(F);
		shooter.setP(P);
		shooter.setI(I);
		shooter.setD(D);
	}
	
	public void setShooterPID_ParametersFromSmartdashboard()
	{
		// Read the F, P, I and D parameters from the smartdashboard
		// divide everthing by 1000 so smart dashboard numbers are not really small
		shooter.setF(SmartDashboard.getNumber("Shooter F", 0.0)/1000);
		shooter.setP(SmartDashboard.getNumber("Shooter P", 0.0)/1000);
		shooter.setI(SmartDashboard.getNumber("Shooter I", 0.0)/1000);
		shooter.setD(SmartDashboard.getNumber("Shooter D", 0.0)/1000);
	}
	
	public void setShooterRPM_FromSmartdashboard()
	{
		setShooterRPM(SmartDashboard.getNumber("Shooter RPM Setpoint", 4500));
	}
}
